/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_components_NeuralParticleSystem_index_ts"],{

/***/ "(app-pages-browser)/./src/components/NeuralParticleSystem/NeuralParticleSystem.module.css":
/*!*****************************************************************************!*\
  !*** ./src/components/NeuralParticleSystem/NeuralParticleSystem.module.css ***!
  \*****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NeuralParticleSystem_container__JUvux\",\"active\":\"NeuralParticleSystem_active__R988f\",\"green\":\"NeuralParticleSystem_green__LgrW2\",\"blue\":\"NeuralParticleSystem_blue__5N816\",\"purple\":\"NeuralParticleSystem_purple__pA7yk\",\"red\":\"NeuralParticleSystem_red__r8wNa\",\"cyan\":\"NeuralParticleSystem_cyan__VJwMX\",\"multi\":\"NeuralParticleSystem_multi__xJcce\",\"canvas\":\"NeuralParticleSystem_canvas__GZ2mZ\",\"matrixCanvas\":\"NeuralParticleSystem_matrixCanvas__mba2Y\",\"dataCanvas\":\"NeuralParticleSystem_dataCanvas__t7Flg\",\"scanlines\":\"NeuralParticleSystem_scanlines__gwL0L\",\"flicker\":\"NeuralParticleSystem_flicker__mWrFO\",\"subtlePulse\":\"NeuralParticleSystem_subtlePulse__Y_j3M\"};\n    if(true) {\n      // 1745380917325\n      var cssReload = __webpack_require__(/*! ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  \nmodule.exports.__checksum = \"57a2d7be60b4\"\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL05ldXJhbFBhcnRpY2xlU3lzdGVtL05ldXJhbFBhcnRpY2xlU3lzdGVtLm1vZHVsZS5jc3MiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQkFBa0I7QUFDbEIsT0FBTyxJQUFVO0FBQ2pCO0FBQ0Esc0JBQXNCLG1CQUFPLENBQUMsd01BQWlJLGNBQWMsc0RBQXNEO0FBQ25PLE1BQU0sVUFBVTtBQUNoQjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvTmV1cmFsUGFydGljbGVTeXN0ZW0vTmV1cmFsUGFydGljbGVTeXN0ZW0ubW9kdWxlLmNzcz9mNTdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJjb250YWluZXJcIjpcIk5ldXJhbFBhcnRpY2xlU3lzdGVtX2NvbnRhaW5lcl9fSlV2dXhcIixcImFjdGl2ZVwiOlwiTmV1cmFsUGFydGljbGVTeXN0ZW1fYWN0aXZlX19SOTg4ZlwiLFwiZ3JlZW5cIjpcIk5ldXJhbFBhcnRpY2xlU3lzdGVtX2dyZWVuX19MZ3JXMlwiLFwiYmx1ZVwiOlwiTmV1cmFsUGFydGljbGVTeXN0ZW1fYmx1ZV9fNU44MTZcIixcInB1cnBsZVwiOlwiTmV1cmFsUGFydGljbGVTeXN0ZW1fcHVycGxlX19wQTd5a1wiLFwicmVkXCI6XCJOZXVyYWxQYXJ0aWNsZVN5c3RlbV9yZWRfX3I4d05hXCIsXCJjeWFuXCI6XCJOZXVyYWxQYXJ0aWNsZVN5c3RlbV9jeWFuX19WSndNWFwiLFwibXVsdGlcIjpcIk5ldXJhbFBhcnRpY2xlU3lzdGVtX211bHRpX194SmNjZVwiLFwiY2FudmFzXCI6XCJOZXVyYWxQYXJ0aWNsZVN5c3RlbV9jYW52YXNfX0daMm1aXCIsXCJtYXRyaXhDYW52YXNcIjpcIk5ldXJhbFBhcnRpY2xlU3lzdGVtX21hdHJpeENhbnZhc19fbWJhMllcIixcImRhdGFDYW52YXNcIjpcIk5ldXJhbFBhcnRpY2xlU3lzdGVtX2RhdGFDYW52YXNfX3Q3RmxnXCIsXCJzY2FubGluZXNcIjpcIk5ldXJhbFBhcnRpY2xlU3lzdGVtX3NjYW5saW5lc19fZ3dMMExcIixcImZsaWNrZXJcIjpcIk5ldXJhbFBhcnRpY2xlU3lzdGVtX2ZsaWNrZXJfX21XckZPXCIsXCJzdWJ0bGVQdWxzZVwiOlwiTmV1cmFsUGFydGljbGVTeXN0ZW1fc3VidGxlUHVsc2VfX1lfajNNXCJ9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE3NDUzODA5MTczMjVcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiQzovVXNlcnMvY2svTGFuZGluZ1Byb3NwZXJhL3Byb3NwZXJhLW5leHRqcy9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIi9fbmV4dC9cIixcImVzTW9kdWxlXCI6ZmFsc2UsXCJsb2NhbHNcIjp0cnVlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIFxuICAgIH1cbiAgXG5tb2R1bGUuZXhwb3J0cy5fX2NoZWNrc3VtID0gXCI1N2EyZDdiZTYwYjRcIlxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/NeuralParticleSystem/NeuralParticleSystem.module.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/NeuralParticleSystem/NeuralParticleSystem.tsx":
/*!**********************************************************************!*\
  !*** ./src/components/NeuralParticleSystem/NeuralParticleSystem.tsx ***!
  \**********************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _NeuralParticleSystem_module_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NeuralParticleSystem.module.css */ \"(app-pages-browser)/./src/components/NeuralParticleSystem/NeuralParticleSystem.module.css\");\n/* harmony import */ var _NeuralParticleSystem_module_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_NeuralParticleSystem_module_css__WEBPACK_IMPORTED_MODULE_2__);\n// src/components/NeuralParticleSystem/NeuralParticleSystem.tsx\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst NeuralParticleSystem = (param)=>{\n    let { density = 60, interactive = true, reactToClick = true, connectDistance = 150, colorScheme = \"green\", matrixEffect = true, dataTransferEffect = true, codeFragmentDensity = 30, flowDirection = \"down\", pulseNodes = true, enableGlow = true } = param;\n    _s();\n    // Canvas and container refs\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const matrixCanvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const dataCanvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // State for dimensions\n    const [dimensions, setDimensions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        width: 0,\n        height: 0\n    });\n    const [isLoaded, setIsLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isInitialized, setIsInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Refs for animations and data - using useRef to avoid re-renders\n    const particlesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const dataPacketsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const codeFragmentsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const mouseRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        x: 0,\n        y: 0,\n        active: false\n    });\n    const lastClickRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        x: 0,\n        y: 0,\n        time: 0\n    });\n    // Animation frame refs\n    const mainAnimationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const matrixAnimationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const dataAnimationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Matrix characters - memo for performance\n    const matrixChars = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const standardChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$+-*/=<>[]{}|~^%#@!?;:,.\".split(\"\");\n        const quantumChars = \"ΨΦΩαβγδεζηθικλμνξπρστυφχψω∞∫∂∇∑∏√∛∜∝∞\".split(\"\");\n        return [\n            ...standardChars,\n            ...quantumChars.filter((_, i)=>i % 3 === 0)\n        ];\n    }, []);\n    // Theme colors with enhanced color schemes\n    const themeColors = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const themes = {\n            green: {\n                primary: \"#00ff00\",\n                secondary: \"#00cc44\",\n                tertiary: \"#003300\",\n                accent: \"#33ff33\",\n                background: \"#001100\",\n                data: \"#ccffcc\"\n            },\n            blue: {\n                primary: \"#0088ff\",\n                secondary: \"#00ccff\",\n                tertiary: \"#000066\",\n                accent: \"#33ccff\",\n                background: \"#000033\",\n                data: \"#ccf5ff\"\n            },\n            purple: {\n                primary: \"#aa00ff\",\n                secondary: \"#cc66ff\",\n                tertiary: \"#330066\",\n                accent: \"#dd99ff\",\n                background: \"#110022\",\n                data: \"#eeccff\"\n            },\n            red: {\n                primary: \"#ff3311\",\n                secondary: \"#ff6644\",\n                tertiary: \"#660000\",\n                accent: \"#ff9977\",\n                background: \"#110000\",\n                data: \"#ffcccc\"\n            },\n            cyan: {\n                primary: \"#00ffff\",\n                secondary: \"#66ffff\",\n                tertiary: \"#006666\",\n                accent: \"#99ffff\",\n                background: \"#001111\",\n                data: \"#ccffff\"\n            },\n            multi: {\n                primary: \"#00ff00\",\n                secondary: \"#00ccff\",\n                tertiary: \"#aa00ff\",\n                accent: \"#ff3311\",\n                background: \"#000022\",\n                data: \"#ffffff\"\n            }\n        };\n        return themes;\n    }, []);\n    // Initialize dimensions and listeners\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const updateDimensions = ()=>{\n            if (!containerRef.current) return;\n            const { offsetWidth, offsetHeight } = containerRef.current;\n            // Only update if dimensions actually changed to prevent unnecessary rerenders\n            setDimensions((prevDimensions)=>{\n                if (prevDimensions.width !== offsetWidth || prevDimensions.height !== offsetHeight) {\n                    return {\n                        width: offsetWidth,\n                        height: offsetHeight\n                    };\n                }\n                return prevDimensions;\n            });\n        };\n        // Set initial dimensions\n        updateDimensions();\n        // Debounce resize handler for better performance\n        let resizeTimer;\n        const handleResize = ()=>{\n            clearTimeout(resizeTimer);\n            resizeTimer = setTimeout(updateDimensions, 100);\n        };\n        window.addEventListener(\"resize\", handleResize, {\n            passive: true\n        });\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            clearTimeout(resizeTimer);\n        };\n    }, []);\n    // Generate particle color based on chosen scheme - memoized for performance\n    const getParticleColor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function() {\n        let isNeuron = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        const colors = themeColors[colorScheme];\n        if (colorScheme === \"multi\") {\n            const schemes = [\n                \"green\",\n                \"blue\",\n                \"purple\",\n                \"red\",\n                \"cyan\"\n            ];\n            const randomScheme = schemes[Math.floor(Math.random() * schemes.length)];\n            const schemeColors = themeColors[randomScheme];\n            return isNeuron ? schemeColors.primary : schemeColors.secondary;\n        }\n        return isNeuron ? colors.primary : colors.secondary;\n    }, [\n        colorScheme,\n        themeColors\n    ]);\n    // Initialize particles when dimensions change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (dimensions.width <= 0 || dimensions.height <= 0 || isInitialized) return;\n        // Set canvas sizes with device pixel ratio for crisp rendering\n        const dpr =  true ? window.devicePixelRatio || 1 : 0;\n        // Initialize canvas contexts\n        const updateCanvas = (canvas)=>{\n            if (!canvas) return;\n            canvas.width = dimensions.width * dpr;\n            canvas.height = dimensions.height * dpr;\n            const ctx = canvas.getContext(\"2d\");\n            if (ctx) {\n                ctx.scale(dpr, dpr);\n            }\n        };\n        updateCanvas(canvasRef.current);\n        updateCanvas(matrixCanvasRef.current);\n        updateCanvas(dataCanvasRef.current);\n        // Initialize particles and effects\n        initParticles();\n        if (matrixEffect) {\n            initCodeFragments();\n        }\n        // Mark as initialized\n        setIsInitialized(true);\n        // Set loaded with delay for transition\n        const loadTimer = setTimeout(()=>{\n            setIsLoaded(true);\n        }, 300);\n        return ()=>clearTimeout(loadTimer);\n    }, [\n        dimensions,\n        matrixEffect,\n        isInitialized\n    ]);\n    // Initialize particles\n    const initParticles = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const { width, height } = dimensions;\n        // Scale density based on screen size to maintain consistent appearance\n        const scaleFactor = width * height / (1920 * 1080);\n        const scaledDensity = Math.max(Math.floor(density * scaleFactor), 20);\n        const count = Math.min(scaledDensity, 500); // Cap at 500 particles for performance\n        const particles = [];\n        for(let i = 0; i < count; i++){\n            const isNeuron = Math.random() < 0.15; // 15% chance to be a neuron node\n            particles.push({\n                x: Math.random() * width,\n                y: Math.random() * height,\n                vx: (Math.random() - 0.5) * (isNeuron ? 0.2 : 0.5),\n                vy: (Math.random() - 0.5) * (isNeuron ? 0.2 : 0.5),\n                radius: isNeuron ? Math.random() * 3 + 2 : Math.random() * 1.5 + 0.5,\n                color: getParticleColor(isNeuron),\n                opacity: isNeuron ? Math.random() * 0.3 + 0.7 : Math.random() * 0.4 + 0.2,\n                isNeuron,\n                pulseRate: Math.random() * 0.02 + 0.01,\n                pulsePhase: Math.random() * Math.PI * 2,\n                connections: [],\n                dataTransfer: isNeuron ? {\n                    active: false,\n                    progress: 0,\n                    speed: 0,\n                    targetNodeIndex: -1\n                } : undefined\n            });\n        }\n        particlesRef.current = particles;\n    }, [\n        dimensions,\n        density,\n        getParticleColor\n    ]);\n    // Initialize code fragments for matrix effect\n    const initCodeFragments = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const { width, height } = dimensions;\n        // Scale fragments based on screen width\n        const count = Math.min(Math.floor(codeFragmentDensity * width / 1920), 120);\n        const fragments = [];\n        for(let i = 0; i < count; i++){\n            fragments.push(createCodeFragment(width));\n        }\n        codeFragmentsRef.current = fragments;\n    }, [\n        dimensions,\n        codeFragmentDensity\n    ]);\n    // Create a new code fragment\n    const createCodeFragment = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((width)=>{\n        // Start position based on flow direction\n        const startY = flowDirection === \"up\" ? dimensions.height + Math.random() * 50 : -Math.random() * 50;\n        const fragment = {\n            x: Math.random() * width,\n            y: startY,\n            speed: Math.random() * 2 + 1,\n            char: matrixChars[Math.floor(Math.random() * matrixChars.length)],\n            opacity: Math.random() * 0.5 + 0.3,\n            lifespan: Math.random() * 200 + 100,\n            age: 0\n        };\n        return fragment;\n    }, [\n        dimensions.height,\n        flowDirection,\n        matrixChars\n    ]);\n    // Create a new data packet for transfer between nodes\n    const createDataPacket = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((sourceIndex, targetIndex)=>{\n        const source = particlesRef.current[sourceIndex];\n        const target = particlesRef.current[targetIndex];\n        if (!source || !target) return null;\n        const colors = themeColors[colorScheme];\n        const packet = {\n            sourceIndex,\n            targetIndex,\n            x: source.x,\n            y: source.y,\n            progress: 0,\n            speed: Math.random() * 0.02 + 0.01,\n            color: colors.data,\n            size: Math.random() * 1.5 + 1\n        };\n        return packet;\n    }, [\n        colorScheme,\n        themeColors\n    ]);\n    // Handle mouse movement\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!interactive || !canvasRef.current || !isInitialized) return;\n        const handleMouseMove = (e)=>{\n            var _canvasRef_current;\n            const rect = (_canvasRef_current = canvasRef.current) === null || _canvasRef_current === void 0 ? void 0 : _canvasRef_current.getBoundingClientRect();\n            if (!rect) return;\n            mouseRef.current = {\n                x: e.clientX - rect.left,\n                y: e.clientY - rect.top,\n                active: true\n            };\n        };\n        const handleMouseLeave = ()=>{\n            mouseRef.current.active = false;\n        };\n        const handleClick = (e)=>{\n            if (!reactToClick || !canvasRef.current) return;\n            const rect = canvasRef.current.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            // Limit click handling rate for better performance\n            const now = Date.now();\n            if (now - lastClickRef.current.time < 300) return; // Debounce clicks\n            // Store click position and time\n            lastClickRef.current = {\n                x,\n                y,\n                time: now\n            };\n            // Create additional particles\n            addParticlesAtPoint(x, y, 5);\n            // Add code fragments at click point\n            if (matrixEffect) {\n                addCodeFragmentsAtPoint(x, y, 10);\n            }\n        };\n        const canvas = canvasRef.current;\n        canvas.addEventListener(\"mousemove\", handleMouseMove, {\n            passive: true\n        });\n        canvas.addEventListener(\"mouseleave\", handleMouseLeave);\n        canvas.addEventListener(\"click\", handleClick);\n        return ()=>{\n            canvas.removeEventListener(\"mousemove\", handleMouseMove);\n            canvas.removeEventListener(\"mouseleave\", handleMouseLeave);\n            canvas.removeEventListener(\"click\", handleClick);\n        };\n    }, [\n        interactive,\n        reactToClick,\n        matrixEffect,\n        isInitialized\n    ]);\n    // Add particles at a specific point\n    const addParticlesAtPoint = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((x, y, count)=>{\n        for(let i = 0; i < count; i++){\n            const angle = Math.random() * Math.PI * 2;\n            const speed = Math.random() * 2 + 1;\n            const isNeuron = Math.random() < 0.3; // Higher chance to be a neuron\n            // Cap total particle count to prevent performance issues\n            if (particlesRef.current.length < 500) {\n                particlesRef.current.push({\n                    x,\n                    y,\n                    vx: Math.cos(angle) * speed * 0.5,\n                    vy: Math.sin(angle) * speed * 0.5,\n                    radius: isNeuron ? Math.random() * 3 + 2 : Math.random() * 1.5 + 0.5,\n                    color: getParticleColor(isNeuron),\n                    opacity: isNeuron ? Math.random() * 0.3 + 0.7 : Math.random() * 0.4 + 0.2,\n                    isNeuron,\n                    pulseRate: Math.random() * 0.02 + 0.01,\n                    pulsePhase: Math.random() * Math.PI * 2,\n                    connections: [],\n                    dataTransfer: isNeuron ? {\n                        active: false,\n                        progress: 0,\n                        speed: 0,\n                        targetNodeIndex: -1\n                    } : undefined\n                });\n            }\n        }\n    }, [\n        getParticleColor\n    ]);\n    // Add code fragments at a specific point\n    const addCodeFragmentsAtPoint = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((x, y, count)=>{\n        for(let i = 0; i < count; i++){\n            const fragment = {\n                x: x + (Math.random() - 0.5) * 100,\n                y,\n                speed: Math.random() * 3 + 2,\n                char: matrixChars[Math.floor(Math.random() * matrixChars.length)],\n                opacity: Math.random() * 0.7 + 0.5,\n                lifespan: Math.random() * 150 + 50,\n                age: 0\n            };\n            codeFragmentsRef.current.push(fragment);\n        }\n    }, [\n        matrixChars\n    ]);\n    // Main animation loop for particles and connections\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!canvasRef.current || !isInitialized || dimensions.width <= 0) return;\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        let frameCount = 0;\n        let lastTimestamp = 0;\n        const animate = (timestamp)=>{\n            // Calculate delta time for smooth animations regardless of frame rate\n            const deltaTime = lastTimestamp ? (timestamp - lastTimestamp) / 16.667 : 1;\n            lastTimestamp = timestamp;\n            // Clear canvas\n            ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n            // Only recompute connections every few frames for performance\n            const shouldComputeConnections = frameCount % 3 === 0;\n            if (shouldComputeConnections) {\n                // Reset connections\n                particlesRef.current.forEach((p)=>{\n                    p.connections = [];\n                });\n                // Compute connections - quadratic operation, so we optimize it\n                const particles = particlesRef.current;\n                const len = particles.length;\n                for(let i = 0; i < len; i++){\n                    const p = particles[i];\n                    for(let j = i + 1; j < len; j++){\n                        const p2 = particles[j];\n                        const dx = p2.x - p.x;\n                        const dy = p2.y - p.y;\n                        // Using squared distance to avoid square root operation\n                        const distSquared = dx * dx + dy * dy;\n                        // Set connection distance based on whether it's a neuron\n                        const connectionDistanceSquared = p.isNeuron || p2.isNeuron ? connectDistance * connectDistance * 2.25 // 1.5^2\n                         : connectDistance * connectDistance;\n                        if (distSquared < connectionDistanceSquared) {\n                            p.connections.push(j);\n                            // Randomly activate data transfer between neurons\n                            if (dataTransferEffect && p.isNeuron && p2.isNeuron && Math.random() < 0.001) {\n                                if (p.dataTransfer && !p.dataTransfer.active) {\n                                    p.dataTransfer.active = true;\n                                    p.dataTransfer.progress = 0;\n                                    p.dataTransfer.speed = Math.random() * 0.02 + 0.01;\n                                    p.dataTransfer.targetNodeIndex = j;\n                                    // Create data packet\n                                    const packet = createDataPacket(i, j);\n                                    if (packet) {\n                                        dataPacketsRef.current.push(packet);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // Update and draw particles\n            const particles = particlesRef.current;\n            const len = particles.length;\n            for(let i = 0; i < len; i++){\n                const p = particles[i];\n                // Update position with delta time for consistent movement\n                p.x += p.vx * deltaTime;\n                p.y += p.vy * deltaTime;\n                // Boundary checks with bounce\n                if (p.x - p.radius <= 0 || p.x + p.radius >= dimensions.width) {\n                    p.vx = -p.vx;\n                    // Clamp position to prevent particles from getting stuck outside\n                    p.x = Math.max(p.radius, Math.min(dimensions.width - p.radius, p.x));\n                }\n                if (p.y - p.radius <= 0 || p.y + p.radius >= dimensions.height) {\n                    p.vy = -p.vy;\n                    p.y = Math.max(p.radius, Math.min(dimensions.height - p.radius, p.y));\n                }\n                // Mouse interaction\n                if (mouseRef.current.active) {\n                    const dx = mouseRef.current.x - p.x;\n                    const dy = mouseRef.current.y - p.y;\n                    const distSquared = dx * dx + dy * dy;\n                    const maxDistance = 150;\n                    const maxDistanceSquared = maxDistance * maxDistance;\n                    if (distSquared < maxDistanceSquared) {\n                        // Distance-based force calculation (using squared distance for performance)\n                        const force = 0.2 * (1 - Math.sqrt(distSquared) / maxDistance);\n                        const angle = Math.atan2(dy, dx);\n                        // Apply force based on particle type\n                        if (p.isNeuron) {\n                            // Slight attraction for neurons\n                            const attractionForce = 0.05;\n                            p.vx += Math.cos(angle) * attractionForce * deltaTime;\n                            p.vy += Math.sin(angle) * attractionForce * deltaTime;\n                        } else {\n                            // Push regular particles away\n                            p.vx -= Math.cos(angle) * force * deltaTime;\n                            p.vy -= Math.sin(angle) * force * deltaTime;\n                        }\n                    }\n                }\n                // Limit velocity for stability\n                const speed = Math.sqrt(p.vx * p.vx + p.vy * p.vy);\n                const maxSpeed = p.isNeuron ? 0.5 : 1;\n                if (speed > maxSpeed) {\n                    p.vx = p.vx / speed * maxSpeed;\n                    p.vy = p.vy / speed * maxSpeed;\n                }\n                // Calculate pulse effect for neurons\n                let displayRadius = p.radius;\n                let currentOpacity = p.opacity;\n                if (p.isNeuron && pulseNodes) {\n                    const pulse = Math.sin(timestamp * p.pulseRate + p.pulsePhase);\n                    displayRadius = p.radius * (1 + 0.2 * pulse);\n                    currentOpacity = p.opacity * (0.8 + 0.2 * pulse);\n                }\n                // Draw connections before particles\n                for (const j of p.connections){\n                    const p2 = particles[j];\n                    const dx = p2.x - p.x;\n                    const dy = p2.y - p.y;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    // Calculate opacity based on distance\n                    const maxDistance = p.isNeuron || p2.isNeuron ? connectDistance * 1.5 : connectDistance;\n                    let lineOpacity = 0.2 * (1 - distance / maxDistance);\n                    // Stronger connections between neurons\n                    if (p.isNeuron && p2.isNeuron) {\n                        lineOpacity *= 1.5;\n                    }\n                    // Create gradient for line\n                    const gradient = ctx.createLinearGradient(p.x, p.y, p2.x, p2.y);\n                    gradient.addColorStop(0, \"\".concat(p.color.replace(\")\", \", \".concat(lineOpacity, \")\"))));\n                    gradient.addColorStop(1, \"\".concat(p2.color.replace(\")\", \", \".concat(lineOpacity, \")\"))));\n                    // Draw line\n                    ctx.beginPath();\n                    ctx.strokeStyle = gradient;\n                    ctx.lineWidth = p.isNeuron && p2.isNeuron ? 0.5 : 0.3;\n                    ctx.moveTo(p.x, p.y);\n                    ctx.lineTo(p2.x, p2.y);\n                    ctx.stroke();\n                }\n                // Draw glow for neurons\n                if (p.isNeuron && enableGlow) {\n                    const glowSize = displayRadius * 8;\n                    const gradient = ctx.createRadialGradient(p.x, p.y, 0, p.x, p.y, glowSize);\n                    gradient.addColorStop(0, p.color.replace(\")\", \", \".concat(currentOpacity * 0.4, \")\")));\n                    gradient.addColorStop(1, p.color.replace(\")\", \", 0)\"));\n                    ctx.beginPath();\n                    ctx.fillStyle = gradient;\n                    ctx.arc(p.x, p.y, glowSize, 0, Math.PI * 2);\n                    ctx.fill();\n                }\n                // Draw particle\n                ctx.beginPath();\n                ctx.fillStyle = p.color.replace(\")\", \", \".concat(currentOpacity, \")\"));\n                ctx.arc(p.x, p.y, displayRadius, 0, Math.PI * 2);\n                ctx.fill();\n            }\n            frameCount++;\n            mainAnimationRef.current = requestAnimationFrame(animate);\n        };\n        animate(0);\n        // Cleanup\n        return ()=>{\n            if (mainAnimationRef.current) {\n                cancelAnimationFrame(mainAnimationRef.current);\n                mainAnimationRef.current = null;\n            }\n        };\n    }, [\n        isInitialized,\n        dimensions,\n        connectDistance,\n        pulseNodes,\n        enableGlow,\n        dataTransferEffect,\n        createDataPacket\n    ]);\n    // Matrix code rain animation\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!isInitialized || !matrixEffect || !matrixCanvasRef.current || dimensions.width <= 0) return;\n        const canvas = matrixCanvasRef.current;\n        const ctx = canvas.getContext(\"2d\", {\n            alpha: true\n        });\n        if (!ctx) return;\n        const animate = ()=>{\n            // Apply a semi-transparent clear for trailing effect\n            ctx.fillStyle = \"rgba(0, 0, 0, 0.05)\";\n            ctx.fillRect(0, 0, dimensions.width, dimensions.height);\n            // Update fragments\n            const fragments = codeFragmentsRef.current;\n            const updatedFragments = [];\n            for(let i = 0; i < fragments.length; i++){\n                const fragment = fragments[i];\n                // Update age\n                const updatedAge = fragment.age + 1;\n                // Check if expired\n                if (updatedAge > fragment.lifespan) {\n                    continue;\n                }\n                // Update position based on flow direction\n                let updatedY = fragment.y;\n                if (flowDirection === \"up\") {\n                    updatedY -= fragment.speed;\n                } else if (flowDirection === \"down\") {\n                    updatedY += fragment.speed;\n                } else {\n                    updatedY += (Math.random() > 0.5 ? 1 : -1) * fragment.speed;\n                }\n                // Skip if out of bounds\n                if (updatedY < -20 || updatedY > dimensions.height + 20) {\n                    continue;\n                }\n                // Calculate opacity based on lifecycle\n                const lifecycleRatio = updatedAge / fragment.lifespan;\n                let opacity = fragment.opacity;\n                if (lifecycleRatio < 0.2) {\n                    // Fade in\n                    opacity *= lifecycleRatio * 5;\n                } else if (lifecycleRatio > 0.8) {\n                    // Fade out\n                    opacity *= 1 - (lifecycleRatio - 0.8) * 5;\n                }\n                // Draw character\n                ctx.font = '14px \"JetBrains Mono\", monospace';\n                // Color based on theme or multi-color\n                if (colorScheme === \"multi\") {\n                    ctx.fillStyle = \"hsl(\".concat(fragment.x * 360 / dimensions.width % 360, \", 100%, 50%, \").concat(opacity, \")\");\n                } else {\n                    ctx.fillStyle = \"\".concat(themeColors[colorScheme].primary).concat(Math.floor(opacity * 255).toString(16).padStart(2, \"0\"));\n                }\n                ctx.fillText(fragment.char, fragment.x, updatedY);\n                // Randomly change character\n                const newChar = Math.random() < 0.05 ? matrixChars[Math.floor(Math.random() * matrixChars.length)] : fragment.char;\n                // Save updated fragment\n                updatedFragments.push({\n                    ...fragment,\n                    y: updatedY,\n                    age: updatedAge,\n                    char: newChar\n                });\n            }\n            // Maintain fragment count\n            const targetCount = Math.min(Math.floor(codeFragmentDensity * (dimensions.width / 1920)), 100);\n            while(updatedFragments.length < targetCount){\n                updatedFragments.push(createCodeFragment(dimensions.width));\n            }\n            codeFragmentsRef.current = updatedFragments;\n            matrixAnimationRef.current = requestAnimationFrame(animate);\n        };\n        animate();\n        return ()=>{\n            if (matrixAnimationRef.current) {\n                cancelAnimationFrame(matrixAnimationRef.current);\n                matrixAnimationRef.current = null;\n            }\n        };\n    }, [\n        isInitialized,\n        matrixEffect,\n        dimensions,\n        colorScheme,\n        codeFragmentDensity,\n        flowDirection,\n        createCodeFragment,\n        themeColors,\n        matrixChars\n    ]);\n    // Data packets animation\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!isInitialized || !dataTransferEffect || !dataCanvasRef.current || dimensions.width <= 0) return;\n        const canvas = dataCanvasRef.current;\n        const ctx = canvas.getContext(\"2d\", {\n            alpha: true\n        });\n        if (!ctx) return;\n        const animate = ()=>{\n            ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n            // Update data packets\n            const packets = dataPacketsRef.current;\n            const updatedPackets = [];\n            for(let i = 0; i < packets.length; i++){\n                const packet = packets[i];\n                // Get source and target particles\n                const source = particlesRef.current[packet.sourceIndex];\n                const target = particlesRef.current[packet.targetIndex];\n                if (!source || !target) continue;\n                // Update progress\n                const updatedProgress = packet.progress + packet.speed;\n                // Remove if complete\n                if (updatedProgress >= 1) {\n                    // Reset data transfer state for source\n                    if (source.dataTransfer) {\n                        source.dataTransfer.active = false;\n                    }\n                    continue;\n                }\n                // Calculate position using cubic bezier curve for arc effect\n                const t = updatedProgress;\n                const x1 = source.x;\n                const y1 = source.y;\n                const x2 = target.x;\n                const y2 = target.y;\n                // Control point offset\n                const cpOffsetX = (x2 - x1) * 0.5 - (y2 - y1) * 0.5;\n                const cpOffsetY = (y2 - y1) * 0.5 + (x2 - x1) * 0.5;\n                // Control points\n                const cpX = (x1 + x2) / 2 + cpOffsetX * 0.3;\n                const cpY = (y1 + y2) / 2 + cpOffsetY * 0.3;\n                // Quadratic bezier formula\n                const x = (1 - t) * (1 - t) * x1 + 2 * (1 - t) * t * cpX + t * t * x2;\n                const y = (1 - t) * (1 - t) * y1 + 2 * (1 - t) * t * cpY + t * t * y2;\n                // Draw packet with glow effect\n                if (enableGlow) {\n                    const glowGradient = ctx.createRadialGradient(x, y, 0, x, y, packet.size * 5);\n                    glowGradient.addColorStop(0, \"\".concat(packet.color, \"80\"));\n                    glowGradient.addColorStop(1, \"\".concat(packet.color, \"00\"));\n                    ctx.beginPath();\n                    ctx.fillStyle = glowGradient;\n                    ctx.arc(x, y, packet.size * 5, 0, Math.PI * 2);\n                    ctx.fill();\n                }\n                // Draw packet core\n                ctx.beginPath();\n                ctx.fillStyle = packet.color;\n                ctx.arc(x, y, packet.size, 0, Math.PI * 2);\n                ctx.fill();\n                // Add motion blur trail\n                const trailLength = 3;\n                for(let j = 1; j <= trailLength; j++){\n                    const trailT = Math.max(0, t - j * 0.03);\n                    const trailX = (1 - trailT) * (1 - trailT) * x1 + 2 * (1 - trailT) * trailT * cpX + trailT * trailT * x2;\n                    const trailY = (1 - trailT) * (1 - trailT) * y1 + 2 * (1 - trailT) * trailT * cpY + trailT * trailT * y2;\n                    ctx.beginPath();\n                    ctx.fillStyle = \"\".concat(packet.color).concat(Math.floor((0.7 - j * 0.2) * 255).toString(16).padStart(2, \"0\"));\n                    ctx.arc(trailX, trailY, packet.size * (1 - j * 0.2), 0, Math.PI * 2);\n                    ctx.fill();\n                }\n                // Save updated packet\n                updatedPackets.push({\n                    ...packet,\n                    progress: updatedProgress\n                });\n            }\n            dataPacketsRef.current = updatedPackets;\n            dataAnimationRef.current = requestAnimationFrame(animate);\n        };\n        animate();\n        return ()=>{\n            if (dataAnimationRef.current) {\n                cancelAnimationFrame(dataAnimationRef.current);\n                dataAnimationRef.current = null;\n            }\n        };\n    }, [\n        isInitialized,\n        dataTransferEffect,\n        dimensions,\n        enableGlow\n    ]);\n    // Cleanup all animations on unmount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        return ()=>{\n            [\n                mainAnimationRef,\n                matrixAnimationRef,\n                dataAnimationRef\n            ].forEach((ref)=>{\n                if (ref.current) {\n                    cancelAnimationFrame(ref.current);\n                    ref.current = null;\n                }\n            });\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"\".concat((_NeuralParticleSystem_module_css__WEBPACK_IMPORTED_MODULE_2___default().container), \" \").concat(isLoaded ? (_NeuralParticleSystem_module_css__WEBPACK_IMPORTED_MODULE_2___default().active) : \"\", \" \").concat((_NeuralParticleSystem_module_css__WEBPACK_IMPORTED_MODULE_2___default())[colorScheme]),\n        \"aria-hidden\": \"true\" // Hidden from screen readers as this is decorative\n        ,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n                ref: canvasRef,\n                className: (_NeuralParticleSystem_module_css__WEBPACK_IMPORTED_MODULE_2___default().canvas),\n                width: dimensions.width,\n                height: dimensions.height\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\ck\\\\LandingProspera\\\\prospera-nextjs\\\\src\\\\components\\\\NeuralParticleSystem\\\\NeuralParticleSystem.tsx\",\n                lineNumber: 899,\n                columnNumber: 7\n            }, undefined),\n            matrixEffect && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n                ref: matrixCanvasRef,\n                className: \"\".concat((_NeuralParticleSystem_module_css__WEBPACK_IMPORTED_MODULE_2___default().canvas), \" \").concat((_NeuralParticleSystem_module_css__WEBPACK_IMPORTED_MODULE_2___default().matrixCanvas)),\n                width: dimensions.width,\n                height: dimensions.height\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\ck\\\\LandingProspera\\\\prospera-nextjs\\\\src\\\\components\\\\NeuralParticleSystem\\\\NeuralParticleSystem.tsx\",\n                lineNumber: 908,\n                columnNumber: 9\n            }, undefined),\n            dataTransferEffect && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n                ref: dataCanvasRef,\n                className: \"\".concat((_NeuralParticleSystem_module_css__WEBPACK_IMPORTED_MODULE_2___default().canvas), \" \").concat((_NeuralParticleSystem_module_css__WEBPACK_IMPORTED_MODULE_2___default().dataCanvas)),\n                width: dimensions.width,\n                height: dimensions.height\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\ck\\\\LandingProspera\\\\prospera-nextjs\\\\src\\\\components\\\\NeuralParticleSystem\\\\NeuralParticleSystem.tsx\",\n                lineNumber: 918,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\ck\\\\LandingProspera\\\\prospera-nextjs\\\\src\\\\components\\\\NeuralParticleSystem\\\\NeuralParticleSystem.tsx\",\n        lineNumber: 893,\n        columnNumber: 5\n    }, undefined);\n};\n_s(NeuralParticleSystem, \"rKnUNW9B+S/Hz8xMMt/t2uzntf8=\");\n_c = NeuralParticleSystem;\n/* harmony default export */ __webpack_exports__[\"default\"] = (NeuralParticleSystem);\nvar _c;\n$RefreshReg$(_c, \"NeuralParticleSystem\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/NeuralParticleSystem/NeuralParticleSystem.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/NeuralParticleSystem/index.ts":
/*!******************************************************!*\
  !*** ./src/components/NeuralParticleSystem/index.ts ***!
  \******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* reexport safe */ _NeuralParticleSystem__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; }\n/* harmony export */ });\n/* harmony import */ var _NeuralParticleSystem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NeuralParticleSystem */ \"(app-pages-browser)/./src/components/NeuralParticleSystem/NeuralParticleSystem.tsx\");\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL05ldXJhbFBhcnRpY2xlU3lzdGVtL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL05ldXJhbFBhcnRpY2xlU3lzdGVtL2luZGV4LnRzP2VkYzMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vTmV1cmFsUGFydGljbGVTeXN0ZW0nO1xyXG5cclxuZXhwb3J0IHR5cGUge1xyXG4gIE5ldXJhbFBhcnRpY2xlU3lzdGVtUHJvcHMsXHJcbiAgTmV1cmFsUGFydGljbGUsXHJcbiAgRGF0YVBhY2tldCxcclxuICBDb2RlRnJhZ21lbnRcclxufSBmcm9tICcuL05ldXJhbFBhcnRpY2xlU3lzdGVtJzsiXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/NeuralParticleSystem/index.ts\n"));

/***/ })

}]);